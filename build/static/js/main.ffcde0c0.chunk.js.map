{"version":3,"sources":["components/Calculator.js","App.js","index.js"],"names":["digits","operators","maxCharsAtFullSize","scaleFactor","maxPrecision","CalculatorDisplay","props","scaleDown","value","pointAt","concat","indexOf","decimalValue","substring","math","eval","length","precisionWithFraction","formattedValue","parseFloat","toLocaleString","undefined","minimumFractionDigits","toExponential","react_default","a","createElement","className","style","transform","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayValue","operator","waitingForOperand","firstOperand","clearAll","handleClick","bind","assertThisInitialized","newKeyValue","_this$state","setState","newDisplayValue","_this$state2","newOperator","stringToEvaluate","e","_this$state3","needPoint","toPrecision","console","log","processClear","processPlusMinusToggle","processPoint","processPercentage","processUnknownKey","processNewKey","target","isDigit","includes","isOperator","processDigit","processOperator","processFunctionKey","id","onClick","Component","App","components_Calculator","src_App"],"mappings":"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","file":"static/js/main.ffcde0c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport math from 'mathjs';\n\n/* Constants */\nconst digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nconst operators = ['/', '*', '-', '+', '='];\n\n/* Only 6 characters can be displayed at the optimal full size.\nIf the character string is longer, we need to scale the display down */\nconst maxCharsAtFullSize = 6;\nconst scaleFactor = 'scale(0.36)';\n\n/* Allow maximum of 16 digits afterthe decimal point */\nconst maxPrecision = 16;\n\n/* Components */\nfunction CalculatorDisplay(props) {\n  const value = props.value;\n  const pointAt = `${value}`.indexOf('.');\n  const decimalValue = value.substring(pointAt, math.eval(value.length));\n  const precisionWithFraction = (pointAt === -1) ? 0 : math.eval(decimalValue.length - 1);\n  let formattedValue = null;\n  let scaleDown = null;\n\n  formattedValue = parseFloat(value).toLocaleString(undefined, { minimumFractionDigits: precisionWithFraction }); // take the default locale formatting\n  if (formattedValue === 'NaN') { //account for errors\n    formattedValue = 'Error';\n  } else {\n    if (formattedValue.length > (maxPrecision - 1)) {\n      formattedValue = parseFloat(value).toExponential(maxPrecision - 4); // Allow at least 4 characters (for scientific notation e.g. e+14) in the output string\n      if (formattedValue === 'NaN') { //account for overflow\n        formattedValue = 'Overflow\\xA0Error';\n      }\n    }\n  }\n  scaleDown = (`${formattedValue}`.length) > maxCharsAtFullSize ? scaleFactor : 'scale(1)';\n  return (\n    <div className=\"calculator-display\">\n      <div className=\"auto-scaling-text\" style={{ transform: scaleDown }}>\n        {formattedValue}\n      </div>\n    </div>\n  );\n}\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false,\n      firstOperand: '0',\n      clearAll: true\n    };\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  processDigit(newKeyValue) {\n    const { displayValue, waitingForOperand } = this.state;\n\n    if (waitingForOperand) {\n      this.setState({ displayValue: `${newKeyValue}`, waitingForOperand: false, clearAll: false });\n    } else {\n      let newDisplayValue = (displayValue === '0') ? `${newKeyValue}` : `${(displayValue)}${newKeyValue}`; //no leading zero\n      this.setState({ displayValue: `${newDisplayValue}`, waitingForOperand: false, clearAll: false });\n    }\n  }\n\n  processOperator(newKeyValue) {\n    const { displayValue, operator, waitingForOperand, firstOperand } = this.state;\n    let newDisplayValue = null;\n    let newOperator = null;\n    let stringToEvaluate = null;\n\n    if (firstOperand === '0' || operator == null || waitingForOperand) { // if not ready to do calculation\n      this.setState({ waitingForOperand: true, firstOperand: displayValue, operator: newKeyValue, clearAll: false });\n      return;\n    } else {\n      stringToEvaluate = `${firstOperand}${operator}${displayValue}`;\n      try {\n        newDisplayValue = `${math.eval(stringToEvaluate)}`\n      } catch (e) {\n        newDisplayValue = 'Error';\n      }\n      if (newDisplayValue === \"Infinity\") { //math.js evaluates division by 0 to be \"Infinity\"\n        newDisplayValue = 'Error';\n      }\n      newOperator = (newKeyValue === \"=\") ? null : newKeyValue;\n      this.setState({ displayValue: `${newDisplayValue}`, waitingForOperand: true, firstOperand: `${newDisplayValue}`, operator: newOperator, clearAll: false })\n    }\n  }\n\n  processPoint(newKeyValue) {\n    const { displayValue, waitingForOperand } = this.state;\n    const needPoint = `${displayValue}`.indexOf('.') === -1 ? true : false;\n    let newDisplayValue = null;\n\n    if (waitingForOperand) { // allow point if starting on a new operand\n      this.setState({ displayValue: '0.', waitingForOperand: false, clearAll: false })\n    } else {\n      if (needPoint) { //if not inputting new operand, only allow point if it's not already present\n        newDisplayValue = `${displayValue}${newKeyValue}`;\n        this.setState({ displayValue: `${newDisplayValue}`, waitingForOperand: false, clearAll: false })\n      }\n    }\n  }\n\n  processPercentage(newKeyValue) {\n    const { displayValue } = this.state;\n    const newDisplayValue = parseFloat(displayValue).toPrecision(maxPrecision) / 100;\n    this.setState({ displayValue: `${newDisplayValue}`, waitingForOperand: false, clearAll: false });\n  }\n\n  processPlusMinusToggle(newKeyValue) {\n    const { displayValue } = this.state;\n    const newDisplayValue = parseFloat(displayValue).toPrecision(maxPrecision) * -1\n    this.setState({ displayValue: `${newDisplayValue}`, waitingForOperand: false, clearAll: false })\n  }\n\n  processClear() {\n    const { clearAll } = this.state;\n    console.log('clearAll', clearAll);\n    if (clearAll) {\n      this.setState({ displayValue: '0', firstOperand: '0', operator: null, waitingForOperand: false, clearAll: true })\n    } else {\n      this.setState({ displayValue: '0', clearAll: true })\n    }\n  }\n\n\n  processUnknownKey(newKeyValue) {\n    /* don't do anything, just write the error to the console log */\n    console.log('Unexpected input: ', newKeyValue);\n  }\n\n  processFunctionKey(newKeyValue) {\n    switch (newKeyValue) {\n      case \"C\":\n        this.processClear(newKeyValue);\n        break;\n      case \"±\":\n        this.processPlusMinusToggle(newKeyValue);\n        break;\n      case \".\":\n        this.processPoint(newKeyValue);\n        break;\n      case \"%\":\n        this.processPercentage(newKeyValue);\n        break;\n      default:\n        this.processUnknownKey(newKeyValue);\n    }\n  }\n\n  handleClick(e) {\n    this.processNewKey(`${e.target.value}`);\n  }\n\n  processNewKey(newKeyValue) {\n    const isDigit = digits.includes(newKeyValue);\n    const isOperator = operators.includes(newKeyValue);\n\n    if (isDigit) {\n      this.processDigit(newKeyValue);\n    } else {\n      if (isOperator) {\n        this.processOperator(newKeyValue);\n      } else {\n        this.processFunctionKey(newKeyValue);\n      }\n    }\n  }\n\n  render() {\n    return (<div className=\"calculator\">\n      <CalculatorDisplay value={this.state.displayValue} />\n\n      <div className=\"calculator-keypad\">\n        <div className=\"input-keys\">\n          <div className=\"function-keys\">\n            <button id=\"key-clear\" value=\"C\" className=\"calculator-key key-clear\" onClick={this.handleClick}>{this.state.clearAll ? 'AC' : 'C'}</button>\n            <button id=\"key-sign\" value=\"±\" className=\"calculator-key key-sign\" onClick={this.handleClick}>&plusmn;</button>\n            <button id=\"key-percent\" value=\"%\" className=\"calculator-key key-percent\" onClick={this.handleClick}>%</button>\n          </div>\n\n          <div className=\"digit-keys\">\n            <button id=\"key-0\" value=\"0\" className=\"calculator-key key-0\" onClick={this.handleClick}>0</button>\n            <button id=\"key-dot\" value=\".\" className=\"calculator-key key-dot\" onClick={this.handleClick}>&middot;</button>\n            <button id=\"key-1\" value=\"1\" className=\"calculator-key key-1\" onClick={this.handleClick}>1</button>\n            <button id=\"key-2\" value=\"2\" className=\"calculator-key key-2\" onClick={this.handleClick}>2</button>\n            <button id=\"key-3\" value=\"3\" className=\"calculator-key key-3\" onClick={this.handleClick}>3</button>\n            <button id=\"key-4\" value=\"4\" className=\"calculator-key key-4\" onClick={this.handleClick}>4</button>\n            <button id=\"key-5\" value=\"5\" className=\"calculator-key key-5\" onClick={this.handleClick}>5</button>\n            <button id=\"key-6\" value=\"6\" className=\"calculator-key key-6\" onClick={this.handleClick}>6</button>\n            <button id=\"key-7\" value=\"7\" className=\"calculator-key key-7\" onClick={this.handleClick}>7</button>\n            <button id=\"key-8\" value=\"8\" className=\"calculator-key key-8\" onClick={this.handleClick}>8</button>\n            <button id=\"key-9\" value=\"9\" className=\"calculator-key key-9\" onClick={this.handleClick}>9</button>\n          </div>\n        </div>\n\n        <div className=\"operator-keys\">\n          <button id=\"key-divide\" value=\"/\" className=\"calculator-key key-divide\" onClick={this.handleClick}>&divide;</button>\n          <button id=\"key-multiply\" value=\"*\" className=\"calculator-key key-multiply\" onClick={this.handleClick}>&times;</button>\n          <button id=\"key-subtract\" value=\"-\" className=\"calculator-key key-subtract\" onClick={this.handleClick}>&ndash;</button>\n          <button id=\"key-add\" value=\"+\" className=\"calculator-key key-add\" onClick={this.handleClick}>+</button>\n          <button id=\"key-equals\" value=\"=\" className=\"calculator-key key-equals\" onClick={this.handleClick}>=</button>\n        </div>\n      </div>\n    </div>)\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from \"./components/Calculator\";\n\nconst App = () => (<Calculator />);\n\nexport default App;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\n\nconst Calculator = () => (<App />);\nexport default Calculator;\n"],"sourceRoot":""}